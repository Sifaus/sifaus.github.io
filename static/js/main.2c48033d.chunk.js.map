{"version":3,"sources":["images/me.jpg","serviceWorker.ts","components/Title.tsx","components/Topbar.tsx","components/AboutMe.tsx","components/Projects.tsx","components/Content.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Title","activeLink","className","Topbar","handler","onClick","bind","AboutMe","src","me","alt","Projects","listItems","type","title","link","text","map","proj","key","toString","href","rel","target","Content","useState","innerContent","setInnerContent","useEffect","el","isDev","process","Main","linkId","setLinkState","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,gC,sQCYvBC,QACU,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2D,YCRaC,MANf,YAAqC,IAApBC,EAAmB,EAAnBA,WAChB,OACC,wBAAIC,UAAU,SAASD,I,MCSVE,MAXf,YAAmC,IAAjBC,EAAgB,EAAhBA,QACjB,OACC,yBAAKF,UAAU,UACd,0BAAMA,UAAU,OAAOG,QAASD,EAAQE,KAAK,KAAM,aAAnD,YACA,0BAAMJ,UAAU,OAAOG,QAASD,EAAQE,KAAK,KAAM,aAAnD,c,8BCSYC,MAXf,WACC,OACC,yBAAKL,UAAU,mBACd,yBAAKM,IAAKC,IAAIC,IAAI,QAClB,uBAAGR,UAAU,SAAb,uN,MCmCYS,MAlCf,WACC,IAUMC,EAV0B,CAE/B,CAAEC,KAAM,MAAOC,MAAO,kBAAmBC,KAAM,iDAAkDC,KAAM,+GACvG,CAAEH,KAAM,MAAOC,MAAO,eAAgBC,KAAM,8CAA+CC,KAAM,wHAEjG,CAAEH,KAAM,MAAOC,MAAO,gBAAiBC,KAAM,iCAAkCC,KAAM,sGACrF,CAAEH,KAAM,MAAOC,MAAO,iBAAkBC,KAAM,kCAAmCC,KAAM,mGACvF,CAAEH,KAAM,MAAOC,MAAO,aAAcC,KAAM,8BAA+BC,KAAM,uDAC/E,CAAEH,KAAM,MAAOC,MAAO,0BAA2BC,KAAM,yDAA0DC,KAAM,gGAE9EC,KAAI,SAACC,GAAD,OAI7C,yBAAKhB,UAAU,UAAUiB,IAAKD,EAAKJ,MAAMM,YACxC,uBAAGC,KAAMH,EAAKH,KAAMO,IAAI,aAAaC,OAAO,UAAUL,EAAKJ,OAC3D,2BAAII,EAAKF,UAUX,OACC,yBAAKd,UAAU,oBACbU,ICPWY,MA1Bf,YAAuC,IAApBvB,EAAmB,EAAnBA,WAAmB,EACGwB,mBAAS,gCADZ,mBAC9BC,EAD8B,KAChBC,EADgB,KAuBrC,OApBAC,qBAAU,WACT,IAAIC,EACJ,OAAQ5B,GACP,IAAK,WACJ4B,EAAKtB,IACL,MACD,IAAK,WACJsB,EAAKlB,IACL,MAID,QACCkB,EAAK,+BAIPF,EAAgBE,KACd,CAAC5B,IAEIyB,GCnBII,GAA2CC,EAOxD,SAASC,IAAa,IAAD,EACWP,mBAAS,YADpB,mBACbQ,EADa,KACLC,EADK,KAGpB,OACC,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,CAAQlC,WAAYgC,EAAQ7B,QAAS8B,IACrC,kBAAC,EAAD,CAAOjC,WAAYgC,IACnB,kBAAC,EAAD,CAAShC,WAAYgC,KAKxBG,IAASC,OAAO,kBAACL,EAAD,MAAUM,SAASC,eAAe,SN6G7C,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAAAC,GACLA,EAAaC,gBAEbC,OAAM,SAAAC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c48033d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.b81bd4d5.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === \"[::1]\" ||\n\t// 127.0.0.0/8 are considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\tprocess.env.PUBLIC_URL,\n\t\t\twindow.location.href\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won\"t work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let\"s check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It\"s the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can\"t reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from \"react\";\r\n\r\nimport \"./Title.scss\";\r\n\r\nfunction Title({ activeLink }: any) {\r\n\treturn (\r\n\t\t<h1 className=\"title\">{activeLink}</h1>\r\n\t);\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\n\r\nimport \"./Topbar.scss\";\r\n\r\nfunction Topbar({ handler }: any) {\r\n\treturn (\r\n\t\t<div className=\"topbar\">\r\n\t\t\t<span className=\"link\" onClick={handler.bind(null, \"about me\")}>about me</span>\r\n\t\t\t<span className=\"link\" onClick={handler.bind(null, \"projects\")}>projects</span>\r\n\t\t</div>\r\n\t);\r\n\r\n\t/*<span className=\"link\" onClick={handler.bind(null, \"old projects\")}>old projects</span>*/\r\n}\r\n\r\nexport default Topbar;\r\n","import React from \"react\";\r\n\r\nimport \"./AboutMe.scss\";\r\n\r\nimport me from '../images/me.jpg';\r\n\r\nfunction AboutMe() {\r\n\treturn (\r\n\t\t<div className=\"content aboutme\">\r\n\t\t\t<img src={me} alt=\"me!\" />\r\n\t\t\t<p className=\"spiel\">\r\n\t\t\t\tI wouldn't know what to do with myself if I haven't started learning coding back in 2007. Since then, I have coded a lot of projects with bad coding practices, broken functionality, horrible UI, and much more.\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default AboutMe;","import React from \"react\";\r\n\r\nimport \"./Projects.scss\";\r\n\r\ninterface ProjectData {\r\n\ttype: string;\r\n\ttitle: string;\r\n\tlink: string;\r\n\ttext: string;\r\n}\r\n\r\nfunction Projects(/*type: string*/) {\r\n\tconst projects: ProjectData[] = [\r\n\t\t// New Projects\r\n\t\t{ type: \"new\", title: \"easy-dictionary\", link: \"https://github.com/yigitlevent/easy-dictionary\", text: \"easily manage their custom dictionaries. an older project, but refactored into a react app with typescript.\" },\r\n\t\t{ type: \"new\", title: \"language-kit\", link: \"https://github.com/yigitlevent/language-kit\", text: \"currently a detailed word generator, with much more features planned. built using typescript, mongodb and expressjs.\" },\r\n\t\t// Old Projects\r\n\t\t{ type: \"old\", title: \"bwg-lifepaths\", link: \"./old/bwg-lifepaths/index.html\", text: \"a lifepath list... thing... built with javascript, for the roleplaying game of burning wheel gold.\" },\r\n\t\t{ type: \"old\", title: \"bwg-magicwheel\", link: \"./old/bwg-magicwheel/index.html\", text: \"a magic wheel rotater, built with html5 canvas, for the roleplaying game of burning wheel gold.\" },\r\n\t\t{ type: \"old\", title: \"kult-tarot\", link: \"./old/kult-tarot/index.html\", text: \"a tarot reading based on the rules of the kult rpg.\" },\r\n\t\t{ type: \"old\", title: \"StellarTravelCalculator\", link: \"https://github.com/yigitlevent/StellarTravelCalculator\", text: \"one of my oldest public c# projects. calculate the time an interplanetary travel will take.\" }\r\n\t];\r\n\tconst listItems: JSX.Element[] = projects.map((proj: ProjectData) =>\r\n\t\t//\t{\r\n\t\t//\t\tif (type === proj.type) {\r\n\t\t//\t\t\treturn (\r\n\t\t<div className=\"project\" key={proj.title.toString()}>\r\n\t\t\t<a href={proj.link} rel=\"noreferrer\" target=\"_blank\">{proj.title}</a>\r\n\t\t\t<p>{proj.text}</p>\r\n\t\t</div>\r\n\t\t//\t\t\t);\r\n\t\t//\t\t}\r\n\t\t//\t\telse {\r\n\t\t//\t\t\treturn (<div className=\"removed\"></div>);\r\n\t\t//\t\t}\r\n\t\t//\t}\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className=\"content projects\">\r\n\t\t\t{listItems}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Projects;","import React, { useState, useEffect } from \"react\";\n\nimport \"./Content.scss\";\n\nimport AboutMe from \"./AboutMe\";\nimport Projects from \"./Projects\";\n\nfunction Content({ activeLink }: any) {\n\tconst [innerContent, setInnerContent] = useState(<span></span>);\n\n\tuseEffect(() => {\n\t\tlet el: JSX.Element;\n\t\tswitch (activeLink) {\n\t\t\tcase \"about me\":\n\t\t\t\tel = AboutMe();\n\t\t\t\tbreak;\n\t\t\tcase \"projects\":\n\t\t\t\tel = Projects(/*\"new\"*/);\n\t\t\t\tbreak;\n\t\t\t/*case \"old projects\":\n\t\t\t\tel = Projects(\"old\");\n\t\t\t\tbreak;*/\n\t\t\tdefault:\n\t\t\t\tel = <span></span>;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tsetInnerContent(el);\n\t}, [activeLink]);\n\n\treturn (innerContent);\n}\n\nexport default Content;\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./styles/index.scss\";\n\nimport Title from \"./components/Title\";\nimport Topbar from \"./components/Topbar\";\nimport Content from \"./components/Content\";\n\nexport const isDev: boolean = (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\");\n\nexport interface LinkState {\n\tactiveLink: string;\n\thandler: any;\n}\n\nfunction Main(): any {\n\tconst [linkId, setLinkState] = useState(\"about me\");\n\n\treturn (\n\t\t<React.StrictMode>\n\t\t\t<Topbar activeLink={linkId} handler={setLinkState} />\n\t\t\t<Title activeLink={linkId} />\n\t\t\t<Content activeLink={linkId} />\n\t\t</React.StrictMode>\n\t);\n}\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}